<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <!-- 加载资源文件 -->        
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:resources/**/jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源 :此处使用Druid连接池-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" init-method="init" >
	    <!-- 数据库驱动 -->
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <!-- 数据库链接 -->
	    <property name="url" value="${jdbc.url}" />
	    <!-- 数据库用户名 -->
	    <property name="username" value="${jdbc.username}" />
	    <!-- 数据库密码 -->
	    <property name="password" value="${jdbc.password}" />
	    <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
	    <property name="initialSize" value="${jdbc.initialSize}" />
	    <!-- 最大连接池数量 -->
	    <property name="maxActive" value="${jdbc.maxActive}" />
	    <!-- 最小连接池数量 -->
	    <property name="minIdle" value="${jdbc.minIdle}" />
	    <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
	              如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
	     -->
	    <property name="maxWait" value="${jdbc.maxWait}" />
	    <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。
                     在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。
	     -->
	    <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
	    <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
                    在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
	     -->
	    <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
	    <!-- 用来检测连接是否有效的sql -->
	    <property name="validationQuery" value="${jdbc.validationQuery}" />
	    <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
	    <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
	    <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
	    <property name="testOnReturn" value="${jdbc.testOnReturn}" />
	    <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于
             timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
	     -->
	    <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
	    <!-- 每个连接池最大预处理语句 -->
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${jdbc.filters}" />
		<!-- 对于长时间不使用的连接强制关闭 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 超过30分钟开始关闭空闲连接 -->   
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />  
        <!-- 将当前关闭动作记录到日志 --> 
        <property name="logAbandoned" value="${jdbc.logAbandoned}" />
	</bean>

	<!-- session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>  
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
			</props>
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:schema/**/*.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置事务管理器bean,使用HibernateTransactionManager事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<!-- 为事务管理器注入sessionFactory" -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务拦截器Bean -->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 为事务拦截器bean注入一个事物管理器 -->
		<property name="transactionManager" ref="transactionManager"></property>
		<property name="transactionAttributes">
			<!-- 定义事务传播属性 -->
			<props>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="change*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- 定义BeanNameAutoProxyCreator -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<!-- 其它需要自动创建事务代理的bean -->
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
</beans>
